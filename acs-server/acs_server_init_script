#!/bin/sh

### BEGIN INIT INFO
# Provides:     acs-server
# Required-Start:       $remote_fs $syslog redis_6379
# Required-Stop:        $remote_fs $syslog redis_6379
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Access control system server
# Description:          Access control system server
### END INIT INFO

CAN_IF=can0
ACS_ADDR=1
REDIS_PORT=6379
REDIS_ADDR=localhost

NAME=acs-server
EXEC=/usr/local/bin/$NAME
LOG=/var/log/acs_server_${CAN_IF}_${ACS_ADDR}.log
EXEC_ARGS="-l $LOG $CAN_IF $ACS_ADDR $REDIS_ADDR $REDIS_PORT"
PIDFILE=/var/run/acs_server_${CAN_IF}_${ACS_ADDR}.pid
SCRIPTNAME=/etc/init.d/asc-server

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Exit if the package is not installed
[ -f "$EXEC" ] || { log_daemon_msg "File $EXEC not found" && exit 0; }

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --exec $EXEC --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --exec $EXEC -- $EXEC_ARGS \
		|| return 2
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $EXEC
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting " "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping " "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$EXEC" "$NAME" && exit 0 || exit $?
	;;
  restart)
	log_daemon_msg "Restarting " "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac